using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Quiz
{
    public class Program
    {
        public static void Main()
        {
            CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;

            bool running = true;

            while (running == true)
            {

                string[] menyval = new string[4]
                {
                    "Heroes",
                    "Capitals",
                    "Skapa eget Quiz",
                    "Avsluta"
                };

                int usersChoice = ShowMenu("Vill du spela ett Quiz, Skapa eget eller Avsluta?", menyval);

                Dictionary<string, string> heroes = new Dictionary<string, string>
                {
                    ["What is the name of Batman?"] = "bruce wayne",
                    ["What is the name of Spiderman?"] = "peter parker",
                    ["What is the name of Superman?"] = "clark kent",
                    ["What is the name of the Incredible Hulk?"] = "bruce banner",
                    ["What is the name of Ironman?"] = "tony stark",
                    ["What is the name of Captain America?"] = "stever rogers",
                    ["What is the name of Wolverine"] = "james howlett"
                };

                Dictionary<string, string> capitals = new Dictionary<string, string>
                {
                    ["What is the capital of Sweden?"] = "stockholm",
                    ["What is the capital of England?"] = "london",
                    ["What is the capital of France?"] = "paris",
                    ["What is the capital of Spain?"] = "madrid",
                    ["What is the capital of Germany?"] = "berlin",
                    ["What is the capital of Norway?"] = "oslo",
                    ["What is the capital of Finland?"] = "helsinki",
                    ["What is the capital of Denmark?"] = "copenhagen",
                    ["What is the capital of Japan?"] = "tokyo",
                    ["What is the capital of Netherlands?"] = "amsterdam"
                };

                if (usersChoice == 0)
                {
                    QuizEngine(heroes);
                }
                else if (usersChoice == 1)
                {
                    QuizEngine(capitals);
                }
                else if (usersChoice == 2)
                {
                    EgetQuizEngine();
                }
                else
                {
                    Console.WriteLine("");
                    Console.WriteLine("Tack f√∂r idag!");
                    running = false;
                }
            }
        }
        //Methods

        public static void QuizEngine(Dictionary<string, string> dictionary)
        {
            int points = 0;

            foreach (KeyValuePair<string, string> pair in dictionary)
            {
                Console.WriteLine("");
                Console.WriteLine(pair.Key);

                Console.Write("Answer: ");
                string answer = Console.ReadLine().ToLower();

                if (answer == pair.Value)
                {
                    Console.WriteLine("Correct answer!");
                    points++;
                    Console.WriteLine("Current score: " + points + " points");
                }
                else
                {
                    Console.WriteLine("Wrong answer!");
                }
            }
            Console.WriteLine("");
            Console.WriteLine("Well done! You got " + points + " points of maximum 10 points");
            Console.WriteLine("");
        }

        public static int ShowMenu(string prompt, string[] options)
        {
            if (options == null || options.Length == 0)
            {
                throw new ArgumentException("Cannot show a menu for an empty array of options.");
            }

            Console.WriteLine(prompt);

            int selected = 0;

            // Hide the cursor that will blink after calling ReadKey.
            Console.CursorVisible = false;

            ConsoleKey? key = null;
            while (key != ConsoleKey.Enter)
            {
                // If this is not the first iteration, move the cursor to the first line of the menu.
                if (key != null)
                {
                    Console.CursorLeft = 0;
                    Console.CursorTop = Console.CursorTop - options.Length;
                }

                // Print all the options, highlighting the selected one.
                for (int i = 0; i < options.Length; i++)
                {
                    var option = options[i];
                    if (i == selected)
                    {
                        Console.BackgroundColor = ConsoleColor.Blue;
                        Console.ForegroundColor = ConsoleColor.White;
                    }
                    Console.WriteLine("- " + option);
                    Console.ResetColor();
                }

                // Read another key and adjust the selected value before looping to repeat all of this.
                key = Console.ReadKey().Key;
                if (key == ConsoleKey.DownArrow)
                {
                    selected = Math.Min(selected + 1, options.Length - 1);
                }
                else if (key == ConsoleKey.UpArrow)
                {
                    selected = Math.Max(selected - 1, 0);
                }
            }

            // Reset the cursor and return the selected option.
            Console.CursorVisible = true;
            return selected;
        }
    }

    [TestClass]
    public class ProgramTests
    {
        [TestMethod]
        public void ExampleTest()
        {
            
        }
    }
}
